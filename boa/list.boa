# Recursive definitions

let rec = fun f -> { self = fun x -> f this.self x }.self

# A list is an object with a field empty, and a non-empty list must also have
# fields head and tail

let list = {
  isEmpty = fun _ -> this.empty,
  getHead = fun _ -> this.head,
  getTail = fun _ -> this.tail,
  
  # constructors
  nil =  fun _ -> this with { empty = true },
  cons = fun x -> fun xs -> this with { empty = false, head = x, tail = xs },

  iterator = (fun _ ->
    { elements = this,
      hasNext = (fun _ -> not this.elements.empty),
      next = (fun _ -> let x = this.elements.head in this.elements := this.elements.tail; x)
    }),

   get = fun n -> if n = 0 then this.head else this.tail.get (n-1),

   map = fun f ->
     if this.empty then
       this.nil {}
     else
       this.cons (f this.head) (this.tail.map f)
}

# Examples

let a = list.cons 1 (list.cons 2 (list.cons 3 (list.nil {})))

let x = a.get 2

let b = a.map (fun x -> 100 + x)
